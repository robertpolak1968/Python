From: <Saved by Windows Internet Explorer 7>
Subject: pysqlite usage guide
Date: Thu, 28 Aug 2008 22:37:02 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01C9095E.97A4B720"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5512

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C9095E.97A4B720
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-guide.html

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den xml:lang=3D"en" =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>pysqlite usage =
guide</TITLE>
<META content=3D"text/html; charset=3Dutf-8" http-equiv=3DContent-Type>
<META name=3DGENERATOR content=3D"MSHTML 6.00.6001.17184">
<STYLE type=3Dtext/css>@import url( docutils.css );
@import url( silvercity.css );
DIV.code-block {
	FONT-SIZE: 10pt; MARGIN-LEFT: 2em; MARGIN-RIGHT: 2em; FONT-FAMILY: =
"Courier New",Courier,monospace; BACKGROUND-COLOR: #eeeeee
}
</STYLE>
</HEAD>
<BODY>
<DIV id=3Dpysqlite-usage-guide class=3Ddocument>
<H1 class=3Dtitle>pysqlite usage guide</H1>
<DIV class=3Dline-block>
<DIV class=3Dline>(c) 2004-2005 David Rushby</DIV>
<DIV class=3Dline>(c) 2005-2007 Gerhard H=C3=A4ring</DIV></DIV>
<P>Last updated for pysqlite 2.4.0</P>
<DIV class=3Dsection>
<H1><A id=3Dtable-of-contents name=3Dtable-of-contents>Table Of =
Contents</A></H1>
<DIV class=3Dline-block>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#introduction">0.=20
Introduction</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#python-database-api-2-0-compliance">1.=20
Python Database API 2.0 Compliance</A></DIV>
<DIV class=3Dline-block>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#incompatibilities">1.1=20
Incompatibilities</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#unsupported-optional-features">1.2=20
Unsupported Optional Features</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#nominally-supported-optional-features">1.3=20
Nominally Supported Optional Features</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#extensions-and-caveats">1.4=20
Extensions and Caveats</A></DIV></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#brief-tutorial">2.=20
Brief Tutorial</A></DIV>
<DIV class=3Dline-block>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#connecting-to-a-database">2.1=20
Connecting to a Database</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#executing-sql-statements">2.2=20
Executing SQL statements</A></DIV></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#native-database-engine-features-and-extensions-beyond-the-python-=
db-api">3.=20
Native Database Engine Features and Extensions Beyond the Python DB=20
API</A></DIV>
<DIV class=3Dline-block>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#creating-user-defined-functions">3.1=20
Creating user-defined functions</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#creating-user-defined-aggregates">3.2=20
Creating user-defined aggregates</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#creating-and-using-collations">3.3=20
Creating and using collations</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#checking-for-complete-statements">3.4=20
Checking for complete statements</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#enabling-sqlite-s-shared-cache">3.5=20
Enabling SQLite's shared cache</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#setting-an-authorizer-callback">3.6=20
Setting an authorizer callback</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#setting-a-progress-handler">3.7=20
Setting a progress handler</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#using-the-connection-as-a-context-manager">3.8=20
Using the connection as a context manager</A></DIV></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#sqlite-and-python-types">4.=20
SQLite and Python types</A></DIV>
<DIV class=3Dline-block>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#id1">4.1=20
Introduction</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#using-adapters-to-store-additional-python-types-in-sqlite-databas=
es">4.2=20
Using adapters to store additional Python types in SQLite =
databases</A></DIV>
<DIV class=3Dline-block>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#letting-your-object-adapt-itself">4.2.1=20
Letting your object adapt itself</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#registering-an-adapter-callable">4.2.2=20
Registering an adapter callable</A></DIV></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#converting-sqlite-values-to-custom-python-types">4.3=20
Converting SQLite values to custom Python types</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#default-pysqlite-adapters-and-converters">4.4=20
Default pysqlite adapters and converters</A></DIV></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#controlling-transactions">5.=20
Controlling Transactions</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#using-pysqlite-efficiently">6.=20
Using pysqlite efficiently</A></DIV>
<DIV class=3Dline-block>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#using-shortcut-methods">6.1=20
Using shortcut methods</A></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#accessing-columns-by-name-instead-of-by-index">6.2=20
Accessing columns by name instead of by index</A></DIV></DIV>
<DIV class=3Dline><A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#combining-apsw-and-pysqlite">7.=20
Combining APSW and pysqlite</A></DIV></DIV></DIV>
<DIV class=3Dsection>
<H1><A id=3Dintroduction name=3Dintroduction>0. Introduction</A></H1>
<P>This Usage Guide is not a tutorial on Python, SQL, or SQLite; rather, =
it is a=20
topical presentation of pysqlite's feature set, with example code to =
demonstrate=20
basic usage patterns. This guide is meant to be consumed in conjunction =
with the=20
Python Database API Specification and the SQLite documentation.</P>
<P>It was originally written by David Rushby for kinterbasdb. He kindly =
gave the=20
permission to adapt it for pysqlite.</P></DIV>
<DIV class=3Dsection>
<H1><A id=3Dpython-database-api-2-0-compliance=20
name=3Dpython-database-api-2-0-compliance>1. Python Database API 2.0=20
Compliance</A></H1>
<DIV class=3Dsection>
<H2><A id=3Dincompatibilities name=3Dincompatibilities>1.1=20
Incompatibilities</A></H2>
<UL>
  <LI>
  <P class=3Dfirst>No type information in cursor.description</P>
  <P><EM>cursor.description</EM> has a tuple with the fields =
(<EM>name</EM>,=20
  <EM>type_code</EM>, <EM>display_size</EM>, <EM>internal_size</EM>,=20
  <EM>precision</EM>, <EM>scale</EM>, <EM>null_ok</EM>) for each column =
that a=20
  query returns. The DB-API spec requires that at least <EM>name</EM> =
and=20
  <EM>type_code</EM> are filled, but at the time cursor.description is =
built,=20
  pysqlite cannot determine any types, yet. So, the only field of=20
  <EM>cursor.description</EM> that pysqlite fills is <EM>name</EM>. All =
other=20
  fields are set to None.</P>
  <LI>
  <P class=3Dfirst>No type objects</P>
  <P>Consequently, there are also no type objects STRING, BINARY, =
NUMBER,=20
  DATETIME, ROWID at module-level. They would be =
useless.</P></LI></UL></DIV>
<DIV class=3Dsection>
<H2><A id=3Dunsupported-optional-features =
name=3Dunsupported-optional-features>1.2=20
Unsupported Optional Features</A></H2>
<UL>
  <LI>
  <P class=3Dfirst><STRONG>Cursor</STRONG> class</P>
  <UL>
    <LI>
    <P class=3Dfirst><STRONG>nextset</STRONG> method</P>
    <P>This method is not implemented because the database engine does =
not=20
    support opening multiple result sets simultaneously with a single=20
    cursor.</P></LI></UL></LI></UL></DIV>
<DIV class=3Dsection>
<H2><A id=3Dnominally-supported-optional-features=20
name=3Dnominally-supported-optional-features>1.3 Nominally Supported =
Optional=20
Features</A></H2>
<UL>
  <LI>
  <P class=3Dfirst><STRONG>Cursor</STRONG> class</P>
  <UL>
    <LI>
    <P class=3Dfirst><STRONG>arraysize</STRONG> attribute</P>
    <P>As required by the spec, the value of this attribute is observed =
with=20
    respect to the fetchmany method. However, changing the value of this =

    attribute does not make any difference in fetch efficiency because =
the=20
    database engine only supports fetching a single row at a time.</P>
    <LI>
    <P class=3Dfirst><STRONG>setinputsizes</STRONG> method</P>
    <P>Although this method is present, it does nothing, as allowed by =
the=20
    spec.</P>
    <LI>
    <P class=3Dfirst><STRONG>setoutputsize</STRONG> method</P>
    <P>Although this method is present, it does nothing, as allowed by =
the=20
    spec.</P></LI></UL></LI></UL></DIV>
<DIV class=3Dsection>
<H2><A id=3Dextensions-and-caveats name=3Dextensions-and-caveats>1.4 =
Extensions and=20
Caveats</A></H2>
<P>pysqlite offers a large feature set beyond the minimal requirements =
of the=20
Python DB API. Most of these extensions are documented in the section of =
this=20
document entitled Native Database Engine Features and Extensions Beyond =
the=20
Python DB API.</P>
<UL>
  <LI>
  <P class=3Dfirst><STRONG>connect</STRONG> function</P>
  <P>The parameter <EM>database</EM> refers to the database file for the =
SQLite=20
  database. It's a normal filesystem path and you can use absolute or =
relative=20
  path names.</P>
  <P>The connect function supports the following optional keyword =
arguments in=20
  addition to those required by the spec:</P>
  <UL>
    <LI>
    <P class=3Dfirst><STRONG>timeout</STRONG> - When a database is =
accessed by=20
    multiple connections, and</P>
    <P>one of the processes modifies the database, the SQLite database =
is locked=20
    until that transaction is committed. The timeout parameter specifies =
how=20
    long the connection should wait for the lock to go away until =
raising an=20
    exception. The default for the timeout parameter is 5.0 (five =
seconds).</P>
    <DL class=3Ddocutils>
      <DT>Example:=20
      <DD>
      <DIV class=3D"first last">
      <DIV class=3Dcode-block><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>database</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_string>"mydb"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>timeout</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_number>10.0</SPAN><SPAN class=3Dp_operator>)</SPAN>=20
    </DIV></DIV></DD></DL>
    <LI>
    <P class=3Dfirst><STRONG>isolation_level</STRONG> - pysqlite will by =
default=20
    open transactions with a "BEGIN" statement, when it encounters a DML =

    statement like INSERT/UPDATE/DELETE/REPLACE. Some users don't want =
pysqlite=20
    to implicitly open transactions for them - they want an autocommit =
mode.=20
    Other users want pysqlite to open different kinds of transactions, =
like with=20
    "BEGIN IMMEDIATE". See <A class=3Dreference=20
    =
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#controlling-transactions">5.=20
    Controlling Transactions</A> for a more detailed explanation.</P>
    <P>Note that you can also switch to a different isolation level by =
setting=20
    the <STRONG>isolation_level</STRONG> property of connections.</P>
    <DL class=3Ddocutils>
      <DT>Example:=20
      <DD>
      <DIV class=3D"first last">
      <DIV class=3Dcode-block><SPAN=20
      =
class=3Dp_commentline>#&nbsp;Turn&nbsp;on&nbsp;autocommit&nbsp;mode</SPAN=
><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"mydb"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>isolation_level</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_word>None</SPAN><SPAN =

      class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;Set&nbsp;isolation_level&nbsp;to&nbsp;"IMMED=
IATE"</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>isolation_level</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_string>"IMMEDIATE"</SPAN>=20
      </DIV></DIV></DD></DL>
    <LI>
    <P class=3Dfirst><STRONG>detect_types</STRONG> - SQLite natively =
supports only=20
    the types TEXT, INTEGER, FLOAT, BLOB and NULL. If you want to use =
other=20
    types, like you have to add support for them yourself. The=20
    <EM>detect_types</EM> parameter and using custom <EM>converters</EM> =

    registered with the module-level <EM>register_converter</EM> =
function allow=20
    you to easily do that.</P>
    <P><EM>detect_types</EM> defaults to 0 (i. e. off, no type =
detection), you=20
    can set it to any combination of <EM>PARSE_DECLTYPES</EM> and=20
    <EM>PARSE_COLNAMES</EM> to turn type detection on.</P>
    <P>Consult the section <A class=3Dreference=20
    =
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#sqlite-and-python-types">4.=20
    SQLite and Python types</A> of this manual for details.</P>
    <UL>
      <LI>
      <P class=3Dfirst><STRONG>sqlite.PARSE_DECLTYPES</STRONG> - This =
makes=20
      pysqlite parse the declared type for each column it returns. It =
will parse=20
      out the first word of the declared type, i. e. for "integer =
primary key",=20
      it will parse out "integer". Then for that column, it will look =
into=20
      pysqlite's converters dictionary and use the converter function =
registered=20
      for that type there.</P>
      <LI>
      <P class=3Dfirst><STRONG>sqlite.PARSE_COLNAMES</STRONG> - This =
makes=20
      pysqlite parse the column name for each column it returns. It will =
look=20
      for a string formed [mytype] in there, and then decide that =
'mytype' is=20
      the type of the column. It will try to find an entry of 'mytype' =
in the=20
      converters dictionary and then use the converter function found =
there to=20
      return the value. The column name found in cursor.description is =
only the=20
      first word of the column name, i. e. if you use something like 'as =
"x=20
      [datetime]"' in your SQL, then pysqlite will parse out everything =
until=20
      the first blank for the column name: the column name would simply =
be=20
      "x".</P>
      <P>The following example uses the column name <EM>timestamp</EM>, =
which is=20
      already registered by default in the converters dictionary with an =

      appropriate converter!</P>
      <P>Example:</P>
      <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>detect_types</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>PARSE_COLNAMES</SPAN><SPAN=20
      class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN=20
      =
class=3Dp_character>'select&nbsp;?&nbsp;as&nbsp;"x&nbsp;[timestamp]"'</SP=
AN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>now</SPAN><SPAN=20
      class=3Dp_operator>(),))</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_identifier>dt</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()[</SPAN><SPAN=20
      class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_word>print</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dt</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>type</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
      class=3Dp_identifier>dt</SPAN><SPAN class=3Dp_operator>)</SPAN> =
</DIV></LI></UL>
    <LI>
    <P class=3Dfirst><STRONG>check_same_thread</STRONG> - SQLite=20
    connections/cursors can only safely be used in the same thread they =
were=20
    created in. pysqlite checks for this each time it would do a call to =
the=20
    SQLite engine. If you are confident that you are ensuring safety =
otherwise,=20
    you can disable that checks by setting check_same_thread to =
False.</P>
    <LI>
    <P class=3Dfirst><STRONG>factory</STRONG> - By default, pysqlite =
uses the=20
    Connection class for the connect call. You can, however, subclass =
the=20
    Connection class and make .connect() use your class instead by =
providing=20
    your class for the factory parameter.</P>
    <P>Example:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_word>class</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_classname>CountCursorsConnection</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>Connection</SPAN><SPAN=20
    class=3Dp_operator>):</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_defname>__init__</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>*</SPAN><SPAN=20
    class=3Dp_identifier>args</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>**</SPAN><SPAN=20
    class=3Dp_identifier>kwargs</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>Connection</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>__init__</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>*</SPAN><SPAN=20
    class=3Dp_identifier>args</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>**</SPAN><SPAN=20
    class=3Dp_identifier>kwargs</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>numcursors</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_number>0</SPAN><SPAN=20
    class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_defname>cursor</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>*</SPAN><SPAN=20
    class=3Dp_identifier>args</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>**</SPAN><SPAN=20
    class=3Dp_identifier>kwargs</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>numcursors</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>+=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_number>1</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_word>return</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>Connection</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>*</SPAN><SPAN=20
    class=3Dp_identifier>args</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>**</SPAN><SPAN=20
    class=3Dp_identifier>kwargs</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>factory</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_identifier>CountCursorsConnection</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur1</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>cursor</SPAN><SPAN=20
    class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN =

    class=3Dp_word>print</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>numcursors</SPAN> </DIV>
    <LI>
    <P class=3Dfirst><STRONG>cached_statements</STRONG> - pysqlite =
internally uses=20
    a statement cache to avoid SQL parsing overhead. If you want to =
explicitly=20
    set the number of statements that are cached for the connection, you =
can set=20
    this parameter. The currently implemented default is to cache 100=20
    statements.</P></LI></UL>
  <DIV class=3Dline-block>
  <DIV class=3Dline><BR></DIV>
  <DIV class=3Dline><BR></DIV></DIV>
  <LI>
  <P class=3Dfirst><STRONG>register_converter</STRONG> function - <TT=20
  class=3D"docutils literal"><SPAN =
class=3Dpre>register_converter(typename,</SPAN> <SPAN =
class=3Dpre>callable)</SPAN></TT> registers a callable to convert a=20
  bytestring from the database into a custom Python type. The converter =
will be=20
  invoked for all database values that are of the type <TT=20
  class=3D"docutils literal"><SPAN class=3Dpre>typename</SPAN></TT>. =
Confer the=20
  parameter <STRONG>detect_types</STRONG> of the =
<STRONG>connect</STRONG> method=20
  for how the type detection works.</P>
  <LI>
  <P class=3Dfirst><STRONG>register_adapter</STRONG> function - <TT=20
  class=3D"docutils literal"><SPAN =
class=3Dpre>register_adapter(type,</SPAN> <SPAN =
class=3Dpre>callable)</SPAN></TT> registers a callable to convert the=20
  custom Python <STRONG>type</STRONG> into one of SQLite's supported =
types. The=20
  callable accepts as single parameter the Python value, and must return =
a value=20
  of the following types: int, long, float, str (UTF-8 encoded), unicode =
or=20
  buffer.</P>
  <LI>
  <P class=3Dfirst><STRONG>enable_callback_tracebacks</STRONG> function =
- <TT=20
  class=3D"docutils literal"><SPAN =
class=3Dpre>enable_callback_tracebacks(flag)</SPAN></TT>=20
  Can be used to enable displaying tracebacks of exceptions in =
user-defined=20
  functions, aggregates and other callbacks being printed to stderr. =
methods=20
  should never raise any exception. This feature is off by default.</P>
  <LI>
  <P class=3Dfirst><STRONG>Connection</STRONG> class</P>
  <UL>
    <LI>
    <P class=3Dfirst><STRONG>isolation_level</STRONG> attribute =
(read-write)</P>
    <P>Get or set the current <EM>isolation level</EM>: None for =
autocommit mode=20
    or one of "DEFERRED", "IMMEDIATE" or "EXLUSIVE". See <A =
class=3Dreference=20
    =
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#controlling-transactions">5.=20
    Controlling Transactions</A> for a more detailed explanation.</P>
    <LI>
    <P class=3Dfirst><STRONG>cursor method</STRONG> - The cursor method =
accepts a=20
    single optional parameter: a custom cursor class extending =
pysqlite's=20
    <EM>Cursor</EM> class that you can adapt to your needs. Note that it =
is=20
    required that your custom cursor class extends pysqlite's =
<EM>Cursor</EM>=20
    class.</P>
    <LI>
    <P class=3Dfirst><STRONG>execute method</STRONG> - Nonstandard - =
this works as=20
    a shortcut for not having to create a cursor object and is =
implemented like=20
    this:</P>
    <BLOCKQUOTE>
      <DIV class=3Dcode-block><SPAN class=3Dp_word>class</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_classname>Connection</SPAN><SPAN =
class=3Dp_operator>:</SPAN><SPAN=20
      class=3Dp_default><BR>&nbsp;&nbsp;</SPAN><SPAN =
class=3Dp_word>def</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>self</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>*</SPAN><SPAN =
class=3Dp_identifier>args</SPAN><SPAN=20
      class=3Dp_operator>):</SPAN><SPAN=20
      class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
      class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(*</SPAN><SPAN=20
      class=3Dp_identifier>args</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
      class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
      class=3Dp_word>return</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN> </DIV></BLOCKQUOTE>
    <LI>
    <P class=3Dfirst><STRONG>executemany method</STRONG> - Nonstandard - =
The same=20
    shortcut as the nonstandard <TT class=3D"docutils literal"><SPAN =
class=3Dpre>execute</SPAN></TT> method.</P>
    <LI>
    <P class=3Dfirst><STRONG>executesript method</STRONG> - Nonstandard =
- The same=20
    shortcut as the nonstandard <TT class=3D"docutils literal"><SPAN =
class=3Dpre>execute</SPAN></TT> method.</P>
    <LI>
    <P class=3Dfirst><STRONG>row_factory</STRONG> attribute =
(read-write)</P>
    <P>You can change this attribute to a callable that accepts the =
cursor and=20
    the original row as tuple and will return the real result row. This =
way, you=20
    can implement more advanced ways of returning results, like ones =
that can=20
    also access columns by name.</P>
    <P>Example:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_word>def</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>dict_factory</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>cursor</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>d</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>{}</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>idx</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>col</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>in</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>enumerate</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>cursor</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>description</SPAN><SPAN=20
    class=3Dp_operator>):</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_identifier>d</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
    class=3Dp_identifier>col</SPAN><SPAN =
class=3Dp_operator>[</SPAN><SPAN=20
    class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]]</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
    class=3Dp_operator>[</SPAN><SPAN =
class=3Dp_identifier>idx</SPAN><SPAN=20
    class=3Dp_operator>]</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>return</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>d</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>connect</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_string>":memory:"</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>row_factory</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>dict_factory</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_string>"select&nbsp;1&nbsp;as&nbsp;a"</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
    class=3Dp_word>print</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()[</SPAN><SPAN=20
    class=3Dp_string>"a"</SPAN><SPAN class=3Dp_operator>]</SPAN> </DIV>
    <P>If the standard tuple types don't suffice for you, and you want=20
    name-based access to columns, you should consider setting <TT=20
    class=3D"docutils literal"><SPAN class=3Dpre>row_factory</SPAN></TT> =
to the=20
    highly-optimized <TT class=3D"docutils literal"><SPAN =
class=3Dpre>pysqlite2.dbapi2.Row</SPAN></TT>=20
    type. It provides both index-based and case-insensitive name-based =
access to=20
    columns with almost no memory overhead. Much better than your own =
custom=20
    dictionary-based approach or even a <TT class=3D"docutils =
literal"><SPAN class=3Dpre>db_row</SPAN></TT> based=20
    solution.</P>
    <LI>
    <P class=3Dfirst><STRONG>text_factory</STRONG> attribute =
(read-write)</P>
    <P>Using this attribute you can control what objects pysqlite =
returns for=20
    the TEXT data type. By default, this attribute is set to <TT=20
    class=3D"docutils literal"><SPAN class=3Dpre>unicode</SPAN></TT> and =
pysqlite=20
    will return Unicode objects for TEXT. If you want to return =
bytestrings=20
    instead, you can set it to <TT class=3D"docutils literal"><SPAN =
class=3Dpre>str</SPAN></TT>.</P>
    <P>For efficiency reasons, there's also a way to return Unicode =
objects only=20
    for non-ASCII data, and bytestrings otherwise. To activate it, set =
this=20
    attribute to <TT class=3D"docutils literal"><SPAN =
class=3Dpre>pysqlite2.dbapi2.OptimizedUnicode</SPAN></TT>.</P>
    <P>You can also set it to any other callable that accepts a single=20
    bytestring parameter and returns the result object.</P>
    <P>See the following example code for illustration:</P>
    <BLOCKQUOTE>
      <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
      class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;Create&nbsp;the&nbsp;table</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN=20
      =
class=3Dp_string>"create&nbsp;table&nbsp;person(lastname,&nbsp;firstname)=
"</SPAN><SPAN=20
      class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
      class=3Dp_identifier>AUSTRIA</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_string>u"\xd6sterreich"</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;by&nbsp;default,&nbsp;rows&nbsp;are&nbsp;ret=
urned&nbsp;as&nbsp;Unicode</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>AUSTRIA</SPAN><SPAN=20
      class=3Dp_operator>,))</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_word>assert</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
      class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
      class=3Dp_operator>]</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>AUSTRIA</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;but&nbsp;we&nbsp;can&nbsp;make&nbsp;pysqlite=
&nbsp;always&nbsp;return&nbsp;bytestrings&nbsp;...</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>text_factory</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>str</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>AUSTRIA</SPAN><SPAN=20
      class=3Dp_operator>,))</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_word>assert</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>type</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
      class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
      class=3Dp_operator>])</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>str</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;the&nbsp;bytestrings&nbsp;will&nbsp;be&nbsp;=
encoded&nbsp;in&nbsp;UTF-8,&nbsp;unless&nbsp;you&nbsp;stored&nbsp;garbage=
&nbsp;in&nbsp;the</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_commentline>#&nbsp;database&nbsp;...</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_word>assert</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
      class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
      class=3Dp_operator>]</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>AUSTRIA</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>encode</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
      class=3Dp_string>"utf-8"</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;we&nbsp;can&nbsp;also&nbsp;implement&nbsp;a&=
nbsp;custom&nbsp;text_factory&nbsp;...</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;here&nbsp;we&nbsp;implement&nbsp;one&nbsp;th=
at&nbsp;will&nbsp;ignore&nbsp;Unicode&nbsp;characters&nbsp;that&nbsp;cann=
ot&nbsp;be</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;decoded&nbsp;from&nbsp;UTF-8</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>text_factory</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>lambda</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>x</SPAN><SPAN=20
      class=3Dp_operator>:</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>unicode</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
      class=3Dp_identifier>x</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_string>"utf-8"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_string>"ignore"</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN=20
      =
class=3Dp_string>"this&nbsp;is&nbsp;latin1&nbsp;and&nbsp;would&nbsp;norma=
lly&nbsp;create&nbsp;errors"</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>+</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_string>u"\xe4\xf6\xfc"</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>encode</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
      class=3Dp_string>"latin1"</SPAN><SPAN =
class=3Dp_operator>),))</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
      class=3Dp_operator>()</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_word>assert</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>type</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
      class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_operator>[</SPAN><SPAN=20
      class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>])</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>unicode</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;pysqlite&nbsp;offers&nbsp;a&nbsp;builtin&nbs=
p;optimized&nbsp;text_factory&nbsp;that&nbsp;will&nbsp;return&nbsp;bytest=
ring</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN=20
      =
class=3Dp_commentline>#&nbsp;objects,&nbsp;if&nbsp;the&nbsp;data&nbsp;is&=
nbsp;in&nbsp;ASCII&nbsp;only,&nbsp;and&nbsp;otherwise&nbsp;return&nbsp;un=
icode&nbsp;objects</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>text_factory</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>OptimizedUnicode</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>AUSTRIA</SPAN><SPAN=20
      class=3Dp_operator>,))</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_word>assert</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>type</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
      class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
      class=3Dp_operator>])</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>unicode</SPAN><SPAN=20
      class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
      class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN=20
      class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"Germany"</SPAN><SPAN=20
      class=3Dp_operator>,))</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
      class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
      class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
      class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_word>assert</SPAN><SPAN=20
      class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>type</SPAN><SPAN=20
      class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
      class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
      class=3Dp_operator>])</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
      class=3Dp_identifier>str</SPAN> </DIV></BLOCKQUOTE>
    <LI>
    <P class=3Dfirst><STRONG>total_changes</STRONG> attribute =
(read-only)</P>
    <P>Returns the total number of database rows that have be modified,=20
    inserted, or deleted since the database connection was =
opened.</P></LI></UL>
  <DIV class=3Dline-block>
  <DIV class=3Dline><BR></DIV></DIV>
  <LI>
  <P class=3Dfirst><STRONG>Cursor</STRONG> class</P>
  <UL>
    <LI>
    <P class=3Dfirst><STRONG>execute</STRONG> method</P>
    <P>pysqlite uses <EM>paramstyle =3D "qmark"</EM>. That means if you =
use=20
    parametrized statements, you use the question mark as =
placeholder.</P>
    <P>This is a basic example showing the use of question marks as =
placeholders=20
    and a parameter tuple:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN =

    class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>who</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_string>"Yeltsin"</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>age</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>72</SPAN><SPAN =

    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_string>"select&nbsp;name_last,&nbsp;age&nbsp;from&nbsp;people&n=
bsp;where&nbsp;name_last=3D?&nbsp;and&nbsp;age=3D?"</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>who</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>age</SPAN><SPAN =
class=3Dp_operator>))</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
    class=3Dp_operator>()</SPAN> </DIV>
    <P>pysqlite also supports <EM>paramstyle =3D "named"</EM>. That =
means you can=20
    use named placeholders in the format ":name", i. e. a colon followed =
by the=20
    parameter name. As parameters, you then supply a mapping instead of =
a=20
    sequence. In the simplest case, a dictionary instead of a tuple.</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN =

    class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>who</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_string>"Yeltsin"</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>age</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>72</SPAN><SPAN =

    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_string>"select&nbsp;name_last,&nbsp;age&nbsp;from&nbsp;people&n=
bsp;where&nbsp;name_last=3D:who&nbsp;and&nbsp;age=3D:age"</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>{</SPAN><SPAN class=3Dp_string>"who"</SPAN><SPAN=20
    class=3Dp_operator>:</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>who</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_string>"age"</SPAN><SPAN=20
    class=3Dp_operator>:</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>age</SPAN><SPAN =
class=3Dp_operator>})</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
    class=3Dp_operator>()</SPAN> </DIV>
    <P>The following example shows a shortcut that you can often use =
when using=20
    named parameters. It exploits the fact that locals() is a =
dictionary, too.=20
    So you can also use it as parameter for <EM>execute</EM>:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN =

    class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>who</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_string>"Yeltsin"</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>age</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>72</SPAN><SPAN =

    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_string>"select&nbsp;name_last,&nbsp;age&nbsp;from&nbsp;people&n=
bsp;where&nbsp;name_last=3D:who&nbsp;and&nbsp;age=3D:age"</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>locals</SPAN><SPAN =
class=3Dp_operator>())</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
    class=3Dp_operator>()</SPAN> </DIV>
    <P><EM>execute</EM> will only execute a single SQL statement. If you =
try to=20
    execute more than one statement with it, it will raise a Warning. =
Use=20
    <EM>executescript</EM> if want to execute multiple SQL statements =
with one=20
    call.</P>
    <LI>
    <P class=3Dfirst><STRONG>executemany</STRONG> method</P>
    <P>The DB-API specifies the executemany method like this:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>executemany</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>operation</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>seq_of_parameters</SPAN><SPAN =
class=3Dp_operator>)</SPAN>=20
    </DIV>
    <P>pysqlite, however, extends <EM>executemany</EM> so it can be used =
more=20
    efficiently for inserting bulk data. The second parameter to=20
    <EM>executemany</EM> can be a <EM>sequence of parameters</EM>, but =
it can=20
    also be an <EM>iterator</EM> returning parameters.</P>
    <P>Example:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_word>class</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_classname>IterChars</SPAN><SPAN=20
    class=3Dp_operator>:</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_defname>__init__</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>count</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>ord</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_character>'a'</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN =

    class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_defname>__iter__</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_word>return</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN=20
    class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_defname>next</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_word>if</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>count</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>&gt;</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>ord</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_character>'z'</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>raise</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>StopIteration</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>count</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>+=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_number>1</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_word>return</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>chr</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>self</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>count</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>-</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>1</SPAN><SPAN=20
    class=3Dp_operator>),)</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    =
class=3Dp_commentline>#&nbsp;this&nbsp;is&nbsp;a&nbsp;1-tuple</SPAN><SPAN=
=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_string>"create&nbsp;table&nbsp;characters(c)"</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>theIter</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>IterChars</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>executemany</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_string>"insert&nbsp;into&nbsp;characters(c)&nbsp;values&nbsp;(?=
)"</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>theIter</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_string>"select&nbsp;c&nbsp;from&nbsp;characters"</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
    class=3Dp_word>print</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>fetchall</SPAN><SPAN =
class=3Dp_operator>()</SPAN> </DIV>
    <P>As generators are iterators, too, here's a much simpler, =
equivalent=20
    example using a generator:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_word>def</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_defname>char_generator</SPAN><SPAN =
class=3Dp_operator>():</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>import</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>string</SPAN><SPAN=20
    class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
    class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>c</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>string</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>letters</SPAN><SPAN =
class=3Dp_operator>[:</SPAN><SPAN=20
    class=3Dp_number>26</SPAN><SPAN class=3Dp_operator>]:</SPAN><SPAN=20
    =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
    class=3Dp_word>yield</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>c</SPAN><SPAN=20
    class=3Dp_operator>,)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>connect</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_string>":memory:"</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>cursor</SPAN><SPAN=20
    class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN =

    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_string>"create&nbsp;table&nbsp;characters(c)"</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>executemany</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_string>"insert&nbsp;into&nbsp;characters(c)&nbsp;values&nbsp;(?=
)"</SPAN><SPAN=20
    class=3Dp_operator>,</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>char_generator</SPAN><SPAN=20
    class=3Dp_operator>())</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_string>"select&nbsp;c&nbsp;from&nbsp;characters"</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
    class=3Dp_word>print</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>fetchall</SPAN><SPAN =
class=3Dp_operator>()</SPAN> </DIV>
    <P><EM>executemany</EM> will only execute a single SQL statement. If =
you try=20
    to execute more than one statement with it, it will raise a Warning. =
Use=20
    <EM>executescript</EM> if want to execute multiple SQL statements =
with one=20
    call.</P>
    <LI>
    <P class=3Dfirst><STRONG>executescript</STRONG> method</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>executemany</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
    class=3Dp_identifier>sqlscript</SPAN><SPAN =
class=3Dp_operator>)</SPAN> </DIV>
    <P>This is a nonstandard convenience method for executing multiple =
SQL=20
    statements at once. It issues a COMMIT statement before, then =
executes the=20
    SQL script it gets as a parameter.</P>
    <P>The SQL script <TT class=3D"docutils literal"><SPAN =
class=3Dpre>sqlscript</SPAN></TT> can be a=20
    bytestring or a Unicode string.</P>
    <P>Example:</P>
    <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_word>import</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
    class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
    class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
    class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
    class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
    class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
    class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>executescript</SPAN><SPAN=20
    class=3Dp_operator>(</SPAN><SPAN=20
    =
class=3Dp_tripledouble>"""<BR>&nbsp;&nbsp;&nbsp;&nbsp;create&nbsp;table&n=
bsp;person(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstname,=
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastname,<BR>&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age<BR>&nbsp;&nbsp;&nbsp;&nbsp;);=
<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;create&nbsp;table&nbsp;book(<BR>&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title,<BR>&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;author,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;published<BR>&nbsp;&nbsp;&nbsp;&nbsp;);<BR><BR>&nbsp;&nbsp;&nbs=
p;&nbsp;insert&nbsp;into&nbsp;book(title,&nbsp;author,&nbsp;published)<BR=
>&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;'Dirk&nbsp;Gently''s&nbsp;Holistic&nbsp;Detective&nbsp;A=
gency',<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Douglas&nbsp;=
Adams',<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1987<BR>&nbsp;=
&nbsp;&nbsp;&nbsp;);<BR>&nbsp;&nbsp;&nbsp;&nbsp;"""</SPAN><SPAN=20
    class=3Dp_operator>)</SPAN> </DIV>
    <LI>
    <P class=3Dfirst><STRONG>interrupt</STRONG> method</P>
    <P>This method has no arguments. You can call it from a different =
thread to=20
    abort any queries that are currently executing on the connection. =
This can=20
    be used to let the user abort runaway queries, for example.</P>
    <LI>
    <P class=3Dfirst><STRONG>rowcount</STRONG> attribute</P>
    <P>Although pysqlite's Cursors implement this attribute, the =
database=20
    engine's own support for the determination of "rows affected"/"rows=20
    selected" is quirky.</P>
    <P>For <TT class=3D"docutils literal"><SPAN =
class=3Dpre>SELECT</SPAN></TT>=20
    statements, <EM>rowcount</EM> is always -1 because pysqlite cannot =
determine=20
    the number of rows a query produced until all rows were fetched.</P>
    <P>For <TT class=3D"docutils literal"><SPAN =
class=3Dpre>DELETE</SPAN></TT>=20
    statements, SQLite reports <EM>rowcount</EM> as 0 if you make a <TT=20
    class=3D"docutils literal"><SPAN class=3Dpre>DELETE</SPAN> <SPAN =
class=3Dpre>FROM</SPAN> <SPAN class=3Dpre>table</SPAN></TT> without any=20
    condition.</P>
    <P>For <EM>executemany</EM> statements, pysqlite sums up the number =
of=20
    modifications into <EM>rowcount</EM>.</P>
    <P>As required by the Python DB API Spec, the <EM>rowcount</EM> =
attribute=20
    "is -1 in case no executeXX() has been performed on the cursor or =
the=20
    rowcount of the last operation is not determinable by the=20
    interface".</P></LI></UL></LI></UL>
<DIV class=3Dline-block>
<DIV class=3Dline><BR></DIV></DIV>
<HR class=3Ddocutils>

<DIV class=3Dline-block>
<DIV class=3Dline><BR></DIV></DIV></DIV></DIV>
<DIV class=3Dsection>
<H1><A id=3Dbrief-tutorial name=3Dbrief-tutorial>2. Brief =
Tutorial</A></H1>
<P>This brief tutorial aims to get the reader started by demonstrating=20
elementary usage of pysqlite. It is not a comprehensive Python Database =
API=20
tutorial, nor is it comprehensive in its coverage of anything else.</P>
<DIV class=3Dsection>
<H2><A id=3Dconnecting-to-a-database name=3Dconnecting-to-a-database>2.1 =
Connecting=20
to a Database</A></H2>
<BLOCKQUOTE>
  <P><STRONG>Example 1</STRONG></P>
  <P>Connecting to a database file <EM>mydb</EM>:</P>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN> </DIV>
  <P><STRONG>Example 2</STRONG></P>
  <P>Creating an in-memory database:</P>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN> </DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Dexecuting-sql-statements name=3Dexecuting-sql-statements>2.2 =
Executing=20
SQL statements</A></H2>
<P>For this section, we have a database <EM>mydb</EM> defined and =
populated by=20
the following SQL code:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dc_identifier>create</SPAN><SPAN=20
  class=3Dc_default>&nbsp;</SPAN><SPAN =
class=3Dc_identifier>table</SPAN><SPAN=20
  class=3Dc_default>&nbsp;</SPAN><SPAN =
class=3Dc_identifier>people</SPAN><SPAN=20
  class=3Dc_default><BR></SPAN><SPAN class=3Dc_operator>(</SPAN><SPAN=20
  class=3Dc_default><BR>&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>name_last</SPAN><SPAN=20
  class=3Dc_default>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>varchar</SPAN><SPAN =
class=3Dc_operator>(</SPAN><SPAN=20
  class=3Dc_number>20</SPAN><SPAN class=3Dc_operator>),</SPAN><SPAN=20
  class=3Dc_default><BR>&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>age</SPAN><SPAN=20
  =
class=3Dc_default>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>integer</SPAN><SPAN =
class=3Dc_default><BR></SPAN><SPAN=20
  class=3Dc_operator>);</SPAN><SPAN =
class=3Dc_default><BR><BR></SPAN><SPAN=20
  class=3Dc_identifier>insert</SPAN><SPAN =
class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>into</SPAN><SPAN =
class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>people</SPAN><SPAN =
class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_operator>(</SPAN><SPAN =
class=3Dc_identifier>name_last</SPAN><SPAN=20
  class=3Dc_operator>,</SPAN><SPAN class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>age</SPAN><SPAN class=3Dc_operator>)</SPAN><SPAN=20
  class=3Dc_default>&nbsp;</SPAN><SPAN =
class=3Dc_identifier>values</SPAN><SPAN=20
  class=3Dc_default>&nbsp;</SPAN><SPAN class=3Dc_operator>(</SPAN><SPAN=20
  class=3Dc_character>'Yeltsin'</SPAN><SPAN =
class=3Dc_operator>,</SPAN><SPAN=20
  class=3Dc_default>&nbsp;&nbsp;&nbsp;</SPAN><SPAN =
class=3Dc_number>72</SPAN><SPAN=20
  class=3Dc_operator>);</SPAN><SPAN class=3Dc_default><BR></SPAN><SPAN=20
  class=3Dc_identifier>insert</SPAN><SPAN =
class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>into</SPAN><SPAN =
class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>people</SPAN><SPAN =
class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_operator>(</SPAN><SPAN =
class=3Dc_identifier>name_last</SPAN><SPAN=20
  class=3Dc_operator>,</SPAN><SPAN class=3Dc_default>&nbsp;</SPAN><SPAN=20
  class=3Dc_identifier>age</SPAN><SPAN class=3Dc_operator>)</SPAN><SPAN=20
  class=3Dc_default>&nbsp;</SPAN><SPAN =
class=3Dc_identifier>values</SPAN><SPAN=20
  class=3Dc_default>&nbsp;</SPAN><SPAN class=3Dc_operator>(</SPAN><SPAN=20
  class=3Dc_character>'Putin'</SPAN><SPAN =
class=3Dc_operator>,</SPAN><SPAN=20
  class=3Dc_default>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dc_number>51</SPAN><SPAN class=3Dc_operator>);</SPAN> =
</DIV></BLOCKQUOTE>
<P><EM>Example 1</EM></P>
<P>This example shows the simplest way to print the entire contents of =
the <TT=20
class=3D"docutils literal"><SPAN class=3Dpre>people</SPAN></TT> =
table:</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Create&nbsp;a&nbsp;connection&nbsp;to&nbsp;t=
he&nbsp;database&nbsp;file&nbsp;"mydb":</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Get&nbsp;a&nbsp;Cursor&nbsp;object&nbsp;that=
&nbsp;operates&nbsp;in&nbsp;the&nbsp;context&nbsp;of&nbsp;Connection&nbsp=
;con:</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>cursor</SPAN><SPAN =

class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN =

class=3Dp_commentline>#&nbsp;Execute&nbsp;the&nbsp;SELECT&nbsp;statement:=
</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;*&nbsp;from&nbsp;people&nbsp;order&nbsp;by&=
nbsp;age"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Retrieve&nbsp;all&nbsp;rows&nbsp;as&nbsp;a&n=
bsp;sequence&nbsp;and&nbsp;print&nbsp;that&nbsp;sequence:</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchall</SPAN><SPAN=20
class=3Dp_operator>()</SPAN> </DIV>
<P>Sample output:</P><PRE class=3Dliteral-block>[(u'Putin', 51), =
(u'Yeltsin', 72)]
</PRE>
<P><EM>Example 2</EM></P>
<P>Here's another trivial example that demonstrates various ways of =
fetching a=20
single row at a time from a SELECT-cursor:</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>SELECT</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;name_last,&nbsp;age&nbsp;from&nbsp;people&n=
bsp;order&nbsp;by&nbsp;age,&nbsp;name_last"</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;1.&nbsp;Iterate&nbsp;over&nbsp;the&nbsp;rows=
&nbsp;available&nbsp;from&nbsp;the&nbsp;cursor,&nbsp;unpacking&nbsp;the</=
SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;resulting&nbsp;sequences&nbsp;to&nbsp;yield&=
nbsp;their&nbsp;elements&nbsp;(name_last,&nbsp;age):</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>SELECT</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>name_last</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>age</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>in</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_character>'%s&nbsp;is&nbsp;%d&nbsp;years&nbsp;old.'</SPAN><SPAN=
=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>%</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>name_last</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>age</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;2.&nbsp;Equivalently:</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>SELECT</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_character>'%s&nbsp;is&nbsp;%d&nbsp;years&nbsp;old.'</SPAN><SPAN=
=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>%</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>],</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>1</SPAN><SPAN=20
class=3Dp_operator>])</SPAN> </DIV>
<P>Sample output:</P><PRE class=3Dliteral-block>Putin is 51 years old.
Yeltsin is 72 years old.
Putin is 51 years old.
Yeltsin is 72 years old.
</PRE>
<P><EM>Example 3</EM></P>
<P>The following program is a simplistic table printer (applied in this =
example=20
to people)</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>FIELD_MAX_WIDTH</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>20</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>TABLE_NAME</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_character>'people'</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>SELECT</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_character>'select&nbsp;*&nbsp;from&nbsp;%s&nbsp;order&nbsp;by&n=
bsp;age,&nbsp;name_last'</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>%</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>TABLE_NAME</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>SELECT</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Print&nbsp;a&nbsp;header.</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>for</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>fieldDesc</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>in</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>description</SPAN><SPAN=20
class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>fieldDesc</SPAN><SPAN =
class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>].</SPAN><SPAN=20
class=3Dp_identifier>ljust</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>FIELD_MAX_WIDTH</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Finish&nbsp;the&nbsp;header&nbsp;with&nbsp;a=
&nbsp;newline.</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_character>'-'</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>*</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>78</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;For&nbsp;each&nbsp;row,&nbsp;print&nbsp;the&=
nbsp;value&nbsp;of&nbsp;each&nbsp;field&nbsp;left-justified&nbsp;within</=
SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;the&nbsp;maximum&nbsp;possible&nbsp;width&nb=
sp;of&nbsp;that&nbsp;field.</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>fieldIndices</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>range</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>len</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>description</SPAN><SPAN=20
class=3Dp_operator>))</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>fieldIndex</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>fieldIndices</SPAN><SPAN =
class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
class=3Dp_identifier>fieldValue</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>str</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_identifier>fieldIndex</SPAN><SPAN =
class=3Dp_operator>])</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>fieldValue</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>ljust</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>FIELD_MAX_WIDTH</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Finish&nbsp;the&nbsp;row&nbsp;with&nbsp;a&nb=
sp;newline.</SPAN>=20
</DIV>
<P>Sample output:</P><PRE class=3Dliteral-block>name_last            age
-------------------------------------------------------------------------=
-----
Putin                51
Yeltsin              72
</PRE>
<P><EM>Example 4</EM></P>
<P>Let's insert more people into the people table:</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>newPeople</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_character>'Lebed'</SPAN><SPAN =

class=3Dp_default>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN =

class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_number>53</SPAN><SPAN class=3Dp_operator>),</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_character>'Zhirinovsky'</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>57</SPAN><SPAN=20
class=3Dp_operator>),</SPAN><SPAN =
class=3Dp_default><BR>&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>person</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>newPeople</SPAN><SPAN =
class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"insert&nbsp;into&nbsp;people&nbsp;(name_last,&nbsp;age)=
&nbsp;values&nbsp;(?,&nbsp;?)"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>person</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN =

class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;The&nbsp;changes&nbsp;will&nbsp;not&nbsp;be&=
nbsp;saved&nbsp;unless&nbsp;the&nbsp;transaction&nbsp;is&nbsp;committed&n=
bsp;explicitly:</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>commit</SPAN><SPAN =

class=3Dp_operator>()</SPAN> </DIV>
<P>Note the use of a parameterized SQL statement above. When dealing =
with=20
repetitive statements, this is much faster and less error-prone than =
assembling=20
each SQL statement manually.</P>
<P>It's also worth noting that in the example above, the code:</P>
<P>It's also worth noting that in the example above, the code:</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>for</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>person</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>in</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>newPeople</SPAN><SPAN=20
class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"insert&nbsp;into&nbsp;people&nbsp;(name_last,&nbsp;age)=
&nbsp;values&nbsp;(?,&nbsp;?)"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>person</SPAN><SPAN class=3Dp_operator>)</SPAN> =
</DIV>
<P>could be rewritten as:</P>
<DIV class=3Dcode-block><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>executemany</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"insert&nbsp;into&nbsp;people&nbsp;(name_last,&nbsp;age)=
&nbsp;values&nbsp;(?,&nbsp;?)"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>newPeople</SPAN><SPAN class=3Dp_operator>)</SPAN> =
</DIV>
<P>After running Example 4, the table printer from Example 3 would =
print:</P><PRE class=3Dliteral-block>name_last            age
-------------------------------------------------------------------------=
-----
Putin                51
Lebed                53
Zhirinovsky          57
Yeltsin              72
</PRE>
<DIV class=3Dline-block>
<DIV class=3Dline><BR></DIV></DIV>
<HR class=3Ddocutils>

<DIV class=3Dline-block>
<DIV class=3Dline><BR></DIV></DIV></DIV></DIV>
<DIV class=3Dsection>
<H1><A=20
id=3Dnative-database-engine-features-and-extensions-beyond-the-python-db-=
api=20
name=3Dnative-database-engine-features-and-extensions-beyond-the-python-d=
b-api>3.=20
Native Database Engine Features and Extensions Beyond the Python DB =
API</A></H1>
<DIV class=3Dsection>
<H2><A id=3Dcreating-user-defined-functions=20
name=3Dcreating-user-defined-functions>3.1 Creating user-defined=20
functions</A></H2>
<P>SQLite supports user-defined functions. Using pysqlite, you can =
create new=20
functions with the connection's <STRONG>create_function</STRONG> =
method:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>create_function</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>self</SPAN><SPAN =

  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>name</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>numparams</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>func</SPAN><SPAN class=3Dp_operator>)</SPAN> =
</DIV>
  <DL class=3Ddocutils>
    <DT><EM>name</EM>=20
    <DD>the name of your function in SQL=20
    <DT><EM>numparams</EM>=20
    <DD>the number of parameters your function accepts, -1 if it accepts =
any=20
    number of parameters=20
    <DT><EM>func</EM>=20
    <DD>the Python function </DD></DL>
  <P>The function can return any of pysqlite's supported SQLite types: =
unicode,=20
  str, int, long, float, buffer and None. Any exception in the =
user-defined=20
  function leads to the SQL statement executed being aborted.</P>
  <P>Example:</P>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>md5</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>md5sum</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>t</SPAN><SPAN=20
  class=3Dp_operator>):</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>md5</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>md5</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>t</SPAN><SPAN class=3Dp_operator>).</SPAN><SPAN=20
  class=3Dp_identifier>hexdigest</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>create_function</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"md5"</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>1</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>md5sum</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>cursor</SPAN><SPAN=20
  class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"select&nbsp;md5(?)"</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"foo"</SPAN><SPAN class=3Dp_operator>,))</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
  class=3Dp_operator>()[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
  class=3Dp_operator>]</SPAN> </DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Dcreating-user-defined-aggregates=20
name=3Dcreating-user-defined-aggregates>3.2 Creating user-defined=20
aggregates</A></H2>
<P>SQLite supports user-defined aggregate functions. Using pysqlite, you =
can=20
create new aggregate functions with the connection's =
<EM>create_aggregate</EM>=20
method.</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>create_aggregate</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>name</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>numparams</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>aggregate_class</SPAN><SPAN =
class=3Dp_operator>)</SPAN>=20
</DIV>
  <P>The aggregate class must implement a <EM>step</EM> method, which =
accepts=20
  the number of parameters defined in <EM>create_aggregate</EM>, and a=20
  <EM>finalize</EM> method which will return the final result of the=20
  aggregate.</P>
  <P>The <EM>finalize</EM> method can return any of pysqlite's supported =
SQLite=20
  types: unicode, str, int, long, float, buffer and None. Any exception =
in the=20
  aggregate's <EM>__init__</EM>, <EM>step</EM> or <EM>finalize</EM> =
methods lead=20
  to the SQL statement executed being aborted.</P>
  <P>Example:</P>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_word>class</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_classname>MySum</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>__init__</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

  class=3Dp_identifier>count</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_number>0</SPAN><SPAN=20
  class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>step</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>value</SPAN><SPAN=20
  class=3Dp_operator>):</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

  class=3Dp_identifier>count</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>+=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>value</SPAN><SPAN=20
  class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>finalize</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

  class=3Dp_identifier>count</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>connect</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>":memory:"</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>create_aggregate</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mysum"</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_number>1</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>MySum</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"create&nbsp;table&nbsp;test(i)"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"insert&nbsp;into&nbsp;test(i)&nbsp;values&nbsp;(1)"</SP=
AN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"insert&nbsp;into&nbsp;test(i)&nbsp;values&nbsp;(2)"</SP=
AN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"select&nbsp;mysum(i)&nbsp;from&nbsp;test"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()[</SPAN><SPAN=20
  class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN> =
</DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Dcreating-and-using-collations =
name=3Dcreating-and-using-collations>3.3=20
Creating and using collations</A></H2>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>create_collation</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>name</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>callable</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN> </DIV></BLOCKQUOTE>
<P>Creates a collation with the specified name and callable. The =
callable will=20
be passed two string arguments. It should return -1 if the first is less =
than=20
the second, 0 if they are equal and 1 and if the first is greater than =
the=20
second. Note that this controls sorting (ORDER BY in SQL) so your =
comparisons=20
don't affect other SQL operations. Read more about SQLite's handling of=20
collations. (This calls sqlite3_create_collation.) If there is an error =
in your=20
Python code then 0 (ie items are equal) is returned.</P>
<P>Note that the callable will get its parameters as Python bytestrings, =
which=20
will normally be encoded in UTF-8.</P>
<P>The following example shows a custom collation that sorts "the wrong=20
way":</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>collate_reverse</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>string1</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>string2</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_operator>-</SPAN><SPAN class=3Dp_identifier>cmp</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>string1</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>string2</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>create_collation</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"reverse"</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>collate_reverse</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>cursor</SPAN><SPAN=20
  class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"create&nbsp;table&nbsp;test(x)"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>executemany</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"insert&nbsp;into&nbsp;test(x)&nbsp;values&nbsp;(?)"</SP=
AN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>[(</SPAN><SPAN class=3Dp_string>"a"</SPAN><SPAN=20
  class=3Dp_operator>,),</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"b"</SPAN><SPAN=20
  class=3Dp_operator>,)])</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN =

  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"select&nbsp;x&nbsp;from&nbsp;test&nbsp;order&nbsp;by&nb=
sp;x&nbsp;collate&nbsp;reverse"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>close</SPAN><SPAN class=3Dp_operator>()</SPAN>=20
</DIV></BLOCKQUOTE>
<P>To remove a collation, call <CITE>create_collation</CITE> with None =
as=20
callable:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>create_collation</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"reverse"</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_word>None</SPAN><SPAN class=3Dp_operator>)</SPAN>=20
</DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Dchecking-for-complete-statements=20
name=3Dchecking-for-complete-statements>3.4 Checking for complete=20
statements</A></H2>
<P>The module-level function <EM>complete_statement(sql)</EM> can be =
used to=20
check if a string contains a complete SQL statement or is still =
incomplete. The=20
given string could still contain invalid SQL, but be parsable as a =
"complete"=20
statement!</P>
<P>This can be used to build a shell for SQLite, like in the following=20
example:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN=20
  =
class=3Dp_commentline>#&nbsp;A&nbsp;minimal&nbsp;SQLite&nbsp;shell&nbsp;f=
or&nbsp;experiments</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>from</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>isolation_level</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>None</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>cursor</SPAN><SPAN=20
  class=3Dp_operator>()</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  class=3Dp_identifier>buffer</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>""</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN =

  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  =
class=3Dp_string>"Enter&nbsp;your&nbsp;SQL&nbsp;commands&nbsp;to&nbsp;exe=
cute&nbsp;in&nbsp;SQLite."</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  =
class=3Dp_string>"Enter&nbsp;a&nbsp;blank&nbsp;line&nbsp;to&nbsp;exit."</=
SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_word>while</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>True</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>line</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>raw_input</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>if</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>line</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>""</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_word>break</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>buffer</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>+=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>line</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>if</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>complete_statement</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>buffer</SPAN><SPAN=20
  class=3Dp_operator>):</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_word>try</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>buffer</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>buffer</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>strip</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>buffer</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
  =
class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>if</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>buffer</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>lstrip</SPAN><SPAN =
class=3Dp_operator>().</SPAN><SPAN=20
  class=3Dp_identifier>upper</SPAN><SPAN =
class=3Dp_operator>().</SPAN><SPAN=20
  class=3Dp_identifier>startswith</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"SELECT"</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>fetchall</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_word>except</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>Error</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>e</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>"An&nbsp;error&nbsp;occurred:"</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>e</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>args</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN =

  class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_identifier>buffer</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>""</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN =

  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>close</SPAN><SPAN class=3Dp_operator>()</SPAN>=20
</DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Denabling-sqlite-s-shared-cache =
name=3Denabling-sqlite-s-shared-cache>3.5=20
Enabling SQLite's shared cache</A></H2>
<P>To enable SQLite's shared cache for the calling thread, call the =
function=20
<EM>enable_shared_cache</EM>.</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;The&nbsp;shared&nbsp;cache&nbsp;is&nbsp;only=
&nbsp;available&nbsp;in&nbsp;SQLite&nbsp;versions&nbsp;3.3.3&nbsp;or&nbsp=
;later</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;See&nbsp;the&nbsp;SQLite&nbsp;documentaton&n=
bsp;for&nbsp;details.</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>enable_shared_cache</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>True</SPAN><SPAN =

  class=3Dp_operator>)</SPAN> </DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Dsetting-an-authorizer-callback =
name=3Dsetting-an-authorizer-callback>3.6=20
Setting an authorizer callback</A></H2>
<P>You can set an authorizer callback if you want to restrict what your =
users=20
can do with the database. This is mostly useful if you accept arbitrary =
SQL from=20
users and want to execute it safely. See the relevant section in the SQL =

documentation for details: <A class=3Dreference=20
href=3D"http://sqlite.org/capi3ref.html#sqlite3_set_authorizer">http://sq=
lite.org/capi3ref.html#sqlite3_set_authorizer</A></P>
<P>All necessary constants like SQLITE_OK, SQLITE_DENY, SQLITE_IGNORE,=20
SQLITE_SELECT, SQLITE_CREATE_INDEX and all other authorizer-related =
constants=20
are available through the dbapi2 module.</P>
<P>Here's an example that demonstrates the usage of this function:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>authorizer_callback</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>action</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>arg1</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>arg2</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbname</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>source</SPAN><SPAN =
class=3Dp_operator>):</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>if</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>action</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>!=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>SQLITE_SELECT</SPAN><SPAN =
class=3Dp_operator>:</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>SQLITE_DENY</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>if</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>arg1</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>"private_table"</SPAN><SPAN =
class=3Dp_operator>:</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>SQLITE_DENY</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>SQLITE_OK</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>connect</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>":memory:"</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>executescript</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_tripledouble>"""<BR>&nbsp;&nbsp;&nbsp;&nbsp;create&nbsp;table&n=
bsp;public_table(c1,&nbsp;c2);<BR>&nbsp;&nbsp;&nbsp;&nbsp;create&nbsp;tab=
le&nbsp;private_table(c1,&nbsp;c2);<BR>&nbsp;&nbsp;&nbsp;&nbsp;"""</SPAN>=
<SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>set_authorizer</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>authorizer_callback</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  class=3Dp_word>try</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"select&nbsp;*&nbsp;from&nbsp;private_table"</SPAN><SPAN=
=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_word>except</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>DatabaseError</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>e</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  =
class=3Dp_string>"SELECT&nbsp;FROM&nbsp;private_table&nbsp;=3D&gt;"</SPAN=
><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>e</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>args</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN =

  class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
  class=3Dp_default>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;access&nbsp;...&nbsp;prohibited</SPAN><SPAN =

  class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>try</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"insert&nbsp;into&nbsp;public_table(c1,&nbsp;c2)&nbsp;va=
lues&nbsp;(1,&nbsp;2)"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_word>except</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>DatabaseError</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>e</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>"DML&nbsp;command&nbsp;=3D&gt;"</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>e</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>args</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN =

  class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
  class=3Dp_default>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;access&nbsp;...&nbsp;prohibited</SPAN><SPAN =

  class=3Dp_default><BR></SPAN></DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Dsetting-a-progress-handler =
name=3Dsetting-a-progress-handler>3.7 Setting=20
a progress handler</A></H2>
<P>If you want to get called by SQLite during long-running operations, =
you can=20
set a progress handler. An example use for this is to keep a GUI updated =
during=20
a long-running query.</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>set_progress_handler</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>self</SPAN><SPAN =

  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>handler</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>n</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN> </DIV></BLOCKQUOTE>
<P>The progress handler will be called every n SQLite virtual machine =
opcodes.=20
If handler returns a nonzero value, the query is aborted with an=20
OperationalError.</P>
<P>Here's an example that demonstrates the usage of this function:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>as</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>progress</SPAN><SPAN=20
  class=3Dp_operator>():</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  =
class=3Dp_string>"Query&nbsp;still&nbsp;executing.&nbsp;Please&nbsp;wait&=
nbsp;..."</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>":memory:"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>"create&nbsp;table&nbsp;test(x)"</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;Let's&nbsp;create&nbsp;some&nbsp;data</SPAN>=
<SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>executemany</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"insert&nbsp;into&nbsp;test(x)&nbsp;values&nbsp;(?)"</SP=
AN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>[(</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
  class=3Dp_operator>,)</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>x</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>xrange</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_number>300</SPAN><SPAN class=3Dp_operator>)])</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;A&nbsp;progress&nbsp;handler,&nbsp;executed&=
nbsp;every&nbsp;10&nbsp;million&nbsp;opcodes</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>set_progress_handler</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>progress</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_number>10000000</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN =

  class=3Dp_default><BR><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;A&nbsp;particularly&nbsp;long-running&nbsp;q=
uery</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>killer_stament</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  =
class=3Dp_tripledouble>"""<BR>&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;count(*=
)&nbsp;from&nbsp;(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel=
ect&nbsp;t1.x&nbsp;from&nbsp;test&nbsp;t1,&nbsp;test&nbsp;t2,&nbsp;test&n=
bsp;t3<BR>&nbsp;&nbsp;&nbsp;&nbsp;)<BR>&nbsp;&nbsp;&nbsp;&nbsp;"""</SPAN>=
<SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>killer_stament</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>"-"</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>*</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_number>50</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN =

  =
class=3Dp_commentline>#&nbsp;Clear&nbsp;the&nbsp;progress&nbsp;handler</S=
PAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>set_progress_handler</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_word>None</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>killer_stament</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR></SPAN></DIV></BLOCKQUOTE></DIV>
<DIV class=3Dsection>
<H2><A id=3Dusing-the-connection-as-a-context-manager=20
name=3Dusing-the-connection-as-a-context-manager>3.8 Using the =
connection as a=20
context manager</A></H2>
<P>With Python 2.5 or higher, pysqlite's connection objects can be used =
as=20
context managers that automatically commit or rollback transactions. In =
the=20
event of an exception, the transaction is rolled back; otherwise, the=20
transaction is committed:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>__future__</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>with_statement</SPAN><SPAN =
class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_word>from</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>pysqlite2</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_word>import</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>dbapi2</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>as</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>connect</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>":memory:"</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"create&nbsp;table&nbsp;person&nbsp;(id&nbsp;integer&nbs=
p;primary&nbsp;key,&nbsp;firstname&nbsp;varchar&nbsp;unique)"</SPAN><SPAN=
=20
  class=3Dp_operator>)</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;Successful,&nbsp;con.commit()&nbsp;is&nbsp;c=
alled&nbsp;automatically&nbsp;afterwards</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>with</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"insert&nbsp;into&nbsp;person(firstname)&nbsp;values&nbs=
p;(?)"</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"Joe"</SPAN><SPAN=20
  class=3Dp_operator>,))</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;con.rollback()&nbsp;is&nbsp;called&nbsp;afte=
r&nbsp;the&nbsp;with&nbsp;block&nbsp;finishes&nbsp;with&nbsp;an&nbsp;exce=
ption,&nbsp;the</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN=20
  =
class=3Dp_commentline>#&nbsp;exception&nbsp;is&nbsp;still&nbsp;raised&nbs=
p;and&nbsp;must&nbsp;be&nbsp;catched</SPAN><SPAN=20
  class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>try</SPAN><SPAN=20
  class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>with</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  =
class=3Dp_string>"insert&nbsp;into&nbsp;person(firstname)&nbsp;values&nbs=
p;(?)"</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"Joe"</SPAN><SPAN=20
  class=3Dp_operator>,))</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
  class=3Dp_word>except</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>sqlite</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>IntegrityError</SPAN><SPAN =
class=3Dp_operator>:</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_string>"couldn't&nbsp;add&nbsp;Joe&nbsp;twice"</SPAN><SPAN=20
  class=3Dp_default><BR><BR></SPAN></DIV></BLOCKQUOTE></DIV></DIV>
<DIV class=3Dsection>
<H1><A id=3Dsqlite-and-python-types name=3Dsqlite-and-python-types>4. =
SQLite and=20
Python types</A></H1>
<DIV class=3Dsection>
<H2><A id=3Did1 name=3Did1>4.1 Introduction</A></H2>
<P><A class=3Dreference=20
href=3D"http://sqlite.org/datatype3.html">http://sqlite.org/datatype3.htm=
l</A></P>
<P>SQLite natively supports the following types: NULL, INTEGER, REAL, =
TEXT,=20
BLOB.</P>
<P>The following Python types can thus be sent to SQLite without any=20
problem:</P>
<TABLE class=3Ddocutils border=3D1>
  <COLGROUP>
  <COL width=3D"67%">
  <COL width=3D"33%"></COLGROUP>
  <THEAD vAlign=3Dbottom>
  <TR>
    <TH class=3Dhead>Python type</TH>
    <TH class=3Dhead>SQLite type</TH></TR></THEAD>
  <TBODY vAlign=3Dtop>
  <TR>
    <TD>NoneType</TD>
    <TD>NULL</TD></TR>
  <TR>
    <TD>int</TD>
    <TD>INTEGER</TD></TR>
  <TR>
    <TD>long</TD>
    <TD>INTEGER</TD></TR>
  <TR>
    <TD>float</TD>
    <TD>REAL</TD></TR>
  <TR>
    <TD>str (utf-8 encoded)</TD>
    <TD>TEXT</TD></TR>
  <TR>
    <TD>unicode</TD>
    <TD>TEXT</TD></TR>
  <TR>
    <TD>buffer</TD>
    <TD>BLOB</TD></TR></TBODY></TABLE>
<P>This is how SQLite types are converted to Python types by =
default:</P>
<TABLE class=3Ddocutils border=3D1>
  <COLGROUP>
  <COL width=3D"27%">
  <COL width=3D"73%"></COLGROUP>
  <THEAD vAlign=3Dbottom>
  <TR>
    <TH class=3Dhead>SQLite type</TH>
    <TH class=3Dhead>Python type</TH></TR></THEAD>
  <TBODY vAlign=3Dtop>
  <TR>
    <TD>NULL</TD>
    <TD>NoneType</TD></TR>
  <TR>
    <TD>INTEGER</TD>
    <TD>int or long, depending on size</TD></TR>
  <TR>
    <TD>REAL</TD>
    <TD>float</TD></TR>
  <TR>
    <TD>TEXT</TD>
    <TD>unicode</TD></TR>
  <TR>
    <TD>BLOB</TD>
    <TD>buffer</TD></TR></TBODY></TABLE>
<P>pysqlite's type system is extensible in both ways: you can store =
additional=20
Python types in a SQLite database via object adaptation, and you can let =

pysqlite convert SQLite types to different Python types via pysqlite's=20
converters.</P></DIV>
<DIV class=3Dsection>
<H2><A =
id=3Dusing-adapters-to-store-additional-python-types-in-sqlite-databases =

name=3Dusing-adapters-to-store-additional-python-types-in-sqlite-database=
s>4.2=20
Using adapters to store additional Python types in SQLite =
databases</A></H2>
<P>Like described before, SQLite supports only a limited set of types =
natively.=20
To use other Python types with SQLite, you must <EM>adapt</EM> them to =
one of=20
pysqlite's supported types for SQLite. So, one of NoneType, int, long, =
float,=20
str, unicode, buffer.</P>
<P>pysqlite uses the Python object adaptation, like described in PEP 246 =
for=20
this. The protocol to use is <TT class=3D"docutils literal"><SPAN =
class=3Dpre>PrepareProtocol</SPAN></TT>.</P>
<P>There are two ways to enable pysqlite to adapt a custom Python type =
to one of=20
the supported ones.</P></DIV>
<DIV class=3Dsection>
<H2><A id=3Dletting-your-object-adapt-itself=20
name=3Dletting-your-object-adapt-itself>4.2.1 Letting your object adapt=20
itself</A></H2>
<P>This is a good approach if you write the class yourself. Let's =
suppose you=20
have a class like this:</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>class</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_classname>Point</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>object</SPAN><SPAN=20
  class=3Dp_operator>):</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_defname>__init__</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN =

  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>x</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>):</SPAN><SPAN=20
  =
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
  class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

  class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>self</SPAN><SPAN=20
  class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>y</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>x</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>y</SPAN> </DIV></BLOCKQUOTE>
<P>Now you want to store the point in a single SQLite column. You'll =
have to=20
choose one of the supported types first that you use to represent the =
point in.=20
Let's just use str and separate the coordinates using a semicolon. Then =
you need=20
to give your class a method <TT class=3D"docutils literal"><SPAN =
class=3Dpre>__conform__(self,</SPAN> <SPAN =
class=3Dpre>protocol)</SPAN></TT> which must return the converted value. =
The=20
parameter <TT class=3D"docutils literal"><SPAN =
class=3Dpre>protocol</SPAN></TT> will=20
be <TT class=3D"docutils literal"><SPAN =
class=3Dpre>PrepareProtocol</SPAN></TT>.</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>class</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_classname>Point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>object</SPAN><SPAN =

class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_defname>__init__</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>self</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>y</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN=20
class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_defname>__conform__</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>protocol</SPAN><SPAN=20
class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
class=3Dp_word>if</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>protocol</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_word>is</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>sqlite</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

class=3Dp_identifier>PrepareProtocol</SPAN><SPAN =
class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"%f;%f"</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>%</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>self</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>":memory:"</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>p</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>Point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_number>4.0</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>-</SPAN><SPAN class=3Dp_number>3.2</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>p</SPAN><SPAN class=3Dp_operator>,))</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
class=3Dp_operator>()[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
class=3Dp_operator>]</SPAN> </DIV></DIV>
<DIV class=3Dsection>
<H2><A id=3Dregistering-an-adapter-callable=20
name=3Dregistering-an-adapter-callable>4.2.2 Registering an adapter=20
callable</A></H2>
<P>The other possibility is to create a function that converts the type =
to the=20
string representation and register the function with <TT=20
class=3D"docutils literal"><SPAN =
class=3Dpre>register_adapter</SPAN></TT>.</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>class</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_classname>Point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>object</SPAN><SPAN =

class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_defname>__init__</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>self</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>y</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_defname>adapt_point</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>point</SPAN><SPAN class=3Dp_operator>):</SPAN><SPAN =

class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"%f;%f"</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>%</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>point</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>point</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>register_adapter</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>Point</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>adapt_point</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>":memory:"</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>p</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>Point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_number>4.0</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>-</SPAN><SPAN class=3Dp_number>3.2</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>p</SPAN><SPAN class=3Dp_operator>,))</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
class=3Dp_operator>()[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
class=3Dp_operator>]</SPAN> </DIV>
<P>The type/class to adapt must be a new-style class, i. e. it must have =
<TT=20
class=3D"docutils literal"><SPAN class=3Dpre>object</SPAN></TT> as one =
of its=20
bases!!!</P>
<P>pysqlite has two default adapters for Python's builtin <EM>date</EM> =
and=20
<EM>datetime</EM> types. Now let's suppose we want to store =
<EM>datetime</EM>=20
objects not in ISO representation, but as Unix timestamp.</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>time</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_defname>adapt_datetime</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>ts</SPAN><SPAN class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>time</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>mktime</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN =

class=3Dp_identifier>ts</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>timetuple</SPAN><SPAN =
class=3Dp_operator>())</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>register_adapter</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>adapt_datetime</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>":memory:"</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>now</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>now</SPAN><SPAN=20
class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;?"</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>now</SPAN><SPAN class=3Dp_operator>,))</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
class=3Dp_operator>()[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
class=3Dp_operator>]</SPAN> </DIV></DIV>
<DIV class=3Dsection>
<H2><A id=3Dconverting-sqlite-values-to-custom-python-types=20
name=3Dconverting-sqlite-values-to-custom-python-types>4.3 Converting =
SQLite=20
values to custom Python types</A></H2>
<P>Now that's all nice and dandy that you can send custom Python types =
to=20
SQLite. But to make it really useful we need to make the Python to =
SQLite to=20
Python roundtrip work.</P>
<P>Enter pysqlite converters.</P>
<P>Let's go back to the Point class. We stored the x and y coordinates =
separated=20
via semicolons as strings in SQLite.</P>
<P>Let's first define a converter function that accepts the string as a=20
parameter and constructs a Point object from it.</P>
<P>!!! Note that converter functions <EM>always</EM> get called with a =
string,=20
no matter under which data type you sent the value to SQLite !!!</P>
<BLOCKQUOTE>
  <DIV class=3Dcode-block><SPAN class=3Dp_word>def</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>convert_point</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>s</SPAN><SPAN=20
  class=3Dp_operator>):</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>y</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>map</SPAN><SPAN=20
  class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>float</SPAN><SPAN=20
  class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
  class=3Dp_identifier>s</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
  class=3Dp_identifier>split</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_string>";"</SPAN><SPAN class=3Dp_operator>))</SPAN><SPAN=20
  class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
  class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN =

  class=3Dp_identifier>Point</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
  class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
  class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>y</SPAN><SPAN=20
  class=3Dp_operator>)</SPAN> </DIV></BLOCKQUOTE>
<P>Now you need to make pysqlite know that what you select from the =
database is=20
actually a point. There are two ways of doing this:</P>
<BLOCKQUOTE>
  <UL class=3Dsimple>
    <LI>Implicitly via the declared type=20
    <LI>Explicitly via the column name </LI></UL></BLOCKQUOTE>
<P>Both ways are described in section <A class=3Dreference=20
href=3D"http://oss.itsystementwicklung.de/download/pysqlite/doc/usage-gui=
de.html#extensions-and-caveats">1.4=20
Extensions and Caveats</A> in the paragraphs describing the connect =
function,=20
and specifically the meaning of the <EM>detect_types</EM> parameter.</P>
<P>The following example illustrates both ways.</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>class</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_classname>Point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>object</SPAN><SPAN =

class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_defname>__init__</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>self</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>y</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN=20
class=3Dp_default><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>def</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_defname>__repr__</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</S=
PAN><SPAN=20
class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"(%f;%f)"</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>%</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>self</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>self</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>def</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>adapt_point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>point</SPAN><SPAN=20
class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"%f;%f"</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>%</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>point</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>point</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>y</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN class=3Dp_word>def</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_defname>convert_point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>s</SPAN><SPAN=20
class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>y</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>map</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>float</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>s</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>split</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>";"</SPAN><SPAN class=3Dp_operator>))</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>return</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>Point</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>y</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Register&nbsp;the&nbsp;adapter</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>register_adapter</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>Point</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>adapt_point</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Register&nbsp;the&nbsp;converter</SPAN><SPAN=
=20
class=3Dp_default><BR></SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>register_converter</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"point"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>convert_point</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>p</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>Point</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_number>4.0</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>-</SPAN><SPAN class=3Dp_number>3.2</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentblock>#########################</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;1)&nbsp;Using&nbsp;declared&nbsp;types</SPAN=
><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>":memory:"</SPAN><SPAN =

class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>detect_types</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_identifier>sqlite</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

class=3Dp_identifier>PARSE_DECLTYPES</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>cursor</SPAN><SPAN =

class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"create&nbsp;table&nbsp;test(p&nbsp;point)"</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"insert&nbsp;into&nbsp;test(p)&nbsp;values&nbsp;(?)"</SP=
AN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>p</SPAN><SPAN=20
class=3Dp_operator>,))</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;p&nbsp;from&nbsp;test"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"with&nbsp;declared&nbsp;types:"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()[</SPAN><SPAN=20
class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>close</SPAN><SPAN=20
class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>close</SPAN><SPAN class=3Dp_operator>()</SPAN><SPAN =

class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentblock>#######################</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;1)&nbsp;Using&nbsp;column&nbsp;names</SPAN><=
SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>":memory:"</SPAN><SPAN =

class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>detect_types</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_identifier>sqlite</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

class=3Dp_identifier>PARSE_COLNAMES</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>cursor</SPAN><SPAN =

class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"create&nbsp;table&nbsp;test(p)"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"insert&nbsp;into&nbsp;test(p)&nbsp;values&nbsp;(?)"</SP=
AN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>p</SPAN><SPAN=20
class=3Dp_operator>,))</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_character>'select&nbsp;p&nbsp;as&nbsp;"p&nbsp;[point]"&nbsp;fro=
m&nbsp;test'</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"with&nbsp;column&nbsp;names:"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()[</SPAN><SPAN=20
class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>close</SPAN><SPAN=20
class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>close</SPAN><SPAN class=3Dp_operator>()</SPAN> =
</DIV></DIV>
<DIV class=3Dsection>
<H2><A id=3Ddefault-pysqlite-adapters-and-converters=20
name=3Ddefault-pysqlite-adapters-and-converters>4.4 Default pysqlite =
adapters and=20
converters</A></H2>
<P>pysqlite has default adapters for the date and datetime types in the =
datetime=20
module. They will be sent as ISO dates/ISO timestamps to SQLite.</P>
<P>pysqlite has default converters registered under the name "date" for=20
datetime.date and under the name "timestamp" for datetime.datetime.</P>
<P>This way, you can use date/timestamps from pysqlite without any =
additional=20
fiddling in most cases. The format of the adapters is also compatible =
with the=20
experimental SQLite date/time functions.</P>
<P>The following example demonstrates this.</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>":memory:"</SPAN><SPAN =

class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>detect_types</SPAN><SPAN =
class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_identifier>sqlite</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

class=3Dp_identifier>PARSE_DECLTYPES</SPAN><SPAN =
class=3Dp_operator>|</SPAN><SPAN=20
class=3Dp_identifier>sqlite</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

class=3Dp_identifier>PARSE_COLNAMES</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>cursor</SPAN><SPAN =

class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"create&nbsp;table&nbsp;test(d&nbsp;date,&nbsp;ts&nbsp;t=
imestamp)"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>today</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>datetime</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>date</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>today</SPAN><SPAN class=3Dp_operator>()</SPAN><SPAN =

class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>now</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>datetime</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN class=3Dp_identifier>now</SPAN><SPAN=20
class=3Dp_operator>()</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN =

class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"insert&nbsp;into&nbsp;test(d,&nbsp;ts)&nbsp;values&nbsp=
;(?,&nbsp;?)"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>today</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>now</SPAN><SPAN class=3Dp_operator>))</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;d,&nbsp;ts&nbsp;from&nbsp;test"</SPAN><SPAN=
=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>today</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"=3D&gt;"</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
class=3Dp_operator>],</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>type</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>])</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>now</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"=3D&gt;"</SPAN><SPAN class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>1</SPAN><SPAN=20
class=3Dp_operator>],</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>type</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>1</SPAN><SPAN class=3Dp_operator>])</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_character>'select&nbsp;current_date&nbsp;as&nbsp;"d&nbsp;[date]=
",&nbsp;current_timestamp&nbsp;as&nbsp;"ts&nbsp;[timestamp]"'</SPAN><SPAN=
=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>fetchone</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_string>"current_date"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>],</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>type</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
class=3Dp_operator>])</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"current_timestamp"</SPAN><SPAN =
class=3Dp_operator>,</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN class=3Dp_number>1</SPAN><SPAN=20
class=3Dp_operator>],</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>type</SPAN><SPAN class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>1</SPAN><SPAN class=3Dp_operator>])</SPAN> </DIV></DIV>
<DIV class=3Dsection>
<H2><A id=3Dcontrolling-transactions name=3Dcontrolling-transactions>5. =
Controlling=20
Transactions</A></H2>
<P>By default, pysqlite opens transactions implicitly before a DML =
statement=20
(<EM>INSERT/UPDATE/DELETE/REPLACE</EM>), and commits transactions =
implicitly=20
before a non-DML, non-DQL statement (i. e. anything other than=20
<EM>SELECT/INSERT/UPDATE/DELETE/REPLACE</EM>).</P>
<P>So if you are within a transaction, and issue a command like <TT=20
class=3D"docutils literal"><SPAN class=3Dpre>CREATE</SPAN> <SPAN =
class=3Dpre>TABLE</SPAN> <SPAN class=3Dpre>...</SPAN></TT>, <TT=20
class=3D"docutils literal"><SPAN class=3Dpre>VACUUM</SPAN></TT>, <TT=20
class=3D"docutils literal"><SPAN class=3Dpre>PRAGMA</SPAN></TT>, =
pysqlite will=20
commit implicitly before executing that command. There are two reasons =
for doing=20
that. The first is that most of these commands don't work within =
transactions.=20
The other reason is that pysqlite needs to keep track of the transaction =
state=20
(if a transaction is active or not).</P>
<P>You can control which kind of "BEGIN" statements pysqlite implicitly =
executes=20
(or none at all) via the <STRONG>isolation_level</STRONG> parameter to =
the=20
<EM>connect</EM> call, or via the <STRONG>isolation_level</STRONG> =
property of=20
connections.</P>
<P>If you want <EM>autocommit mode</EM>, then set=20
<STRONG>isolation_level</STRONG> to None.</P>
<P>Otherwise leave it at it's default, which will result in a plain =
"BEGIN"=20
statement, or set it to one of SQLite's supported isolation levels: =
DEFERRED,=20
IMMEDIATE or EXCLUSIVE.</P></DIV>
<DIV class=3Dsection>
<H2><A id=3Dusing-pysqlite-efficiently =
name=3Dusing-pysqlite-efficiently>6. Using=20
pysqlite efficiently</A></H2></DIV>
<DIV class=3Dsection>
<H2><A id=3Dusing-shortcut-methods name=3Dusing-shortcut-methods>6.1 =
Using shortcut=20
methods</A></H2>
<P>Using the nonstandard <TT class=3D"docutils literal"><SPAN =
class=3Dpre>execute()</SPAN></TT>, <TT=20
class=3D"docutils literal"><SPAN class=3Dpre>executemany()</SPAN></TT> =
and <TT=20
class=3D"docutils literal"><SPAN class=3Dpre>executescript()</SPAN></TT> =
methods of=20
the Connection object, your code can be written more concisely, because =
you=20
don't have to create the - often superfluous Cursor objects explicitly. =
Instead,=20
the Cursor objects are created implicitly and these shortcut methods =
return the=20
cursor objects. This way, you can for example execute a SELECT statement =
and=20
iterate over it directly using only a single call on the Connection =
object.</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>persons</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"Hugo"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"Boss"</SPAN><SPAN class=3Dp_operator>),</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"Calvin"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"Klein"</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_operator>]</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>sqlite</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

class=3Dp_identifier>connect</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>":memory:"</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN =

class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Create&nbsp;the&nbsp;table</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"create&nbsp;table&nbsp;person(firstname,&nbsp;lastname)=
"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Fill&nbsp;the&nbsp;table</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>executemany</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"insert&nbsp;into&nbsp;person(firstname,&nbsp;lastname)&=
nbsp;values&nbsp;(?,&nbsp;?)"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>persons</SPAN><SPAN =
class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Print&nbsp;the&nbsp;table&nbsp;contents</SPA=
N><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>for</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>in</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;firstname,&nbsp;lastname&nbsp;from&nbsp;per=
son"</SPAN><SPAN=20
class=3Dp_operator>):</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>print</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Using&nbsp;a&nbsp;dummy&nbsp;WHERE&nbsp;clau=
se&nbsp;to&nbsp;not&nbsp;let&nbsp;SQLite&nbsp;take&nbsp;the&nbsp;shortcut=
&nbsp;table&nbsp;deletes.</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>print</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"I&nbsp;just&nbsp;deleted"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"delete&nbsp;from&nbsp;person&nbsp;where&nbsp;1=3D1"</SP=
AN><SPAN=20
class=3Dp_operator>).</SPAN><SPAN =
class=3Dp_identifier>rowcount</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_string>"rows"</SPAN> </DIV></DIV>
<DIV class=3Dsection>
<H2><A id=3Daccessing-columns-by-name-instead-of-by-index=20
name=3Daccessing-columns-by-name-instead-of-by-index>6.2 Accessing =
columns by name=20
instead of by index</A></H2>
<P>A cool new feature of pysqlite 2.1.0 is the new builtin sqlite.Row =
class=20
designed to be used as a row factory.</P>
<P>Rows wrapped with this class can be accessed both by index (like =
tuples) and=20
case-insensitively by name:</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>"mydb"</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>row_factory</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>sqlite</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN =

class=3Dp_identifier>Row</SPAN><SPAN =
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>cursor</SPAN><SPAN =
class=3Dp_operator>()</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>cur</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>execute</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;name_last,&nbsp;age&nbsp;from&nbsp;people"<=
/SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>for</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_word>in</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>cur</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>assert</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>0</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN =
class=3Dp_string>"name_last"</SPAN><SPAN=20
class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>assert</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_string>"name_last"</SPAN><SPAN =
class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN =
class=3Dp_string>"nAmE_lAsT"</SPAN><SPAN=20
class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>assert</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>1</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN class=3Dp_string>"age"</SPAN><SPAN=20
class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default><BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN=20
class=3Dp_word>assert</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>row</SPAN><SPAN class=3Dp_operator>[</SPAN><SPAN=20
class=3Dp_number>1</SPAN><SPAN class=3Dp_operator>]</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_operator>=3D=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>row</SPAN><SPAN=20
class=3Dp_operator>[</SPAN><SPAN class=3Dp_string>"AgE"</SPAN><SPAN=20
class=3Dp_operator>]</SPAN> </DIV></DIV>
<DIV class=3Dsection>
<H2><A id=3Dcombining-apsw-and-pysqlite =
name=3Dcombining-apsw-and-pysqlite>7.=20
Combining APSW and pysqlite</A></H2>
<P>APSW is "Another Python SQLite Wrapper". Its goal is to directly wrap =
the=20
SQLite API for Python. If there's SQLite functionality that is only =
wrapped via=20
APSW, but not (yet) via pysqlite, then you can still use the APSW =
functionality=20
in pysqlite.</P>
<P>Just use the APSW Connection as a parameter to the connect function =
and reuse=20
an existing APSW connection like this.</P>
<DIV class=3Dcode-block><SPAN class=3Dp_word>from</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>pysqlite2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>dbapi2</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_identifier>as</SPAN><SPAN =

class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_word>import</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>apsw</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN =
class=3Dp_identifier>apsw_con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>apsw</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>Connection</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN class=3Dp_string>":memory:"</SPAN><SPAN =

class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>apsw_con</SPAN><SPAN =
class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>createscalarfunction</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_string>"times_two"</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_word>lambda</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>x</SPAN><SPAN class=3Dp_operator>:</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_number>2</SPAN><SPAN=20
class=3Dp_operator>*</SPAN><SPAN class=3Dp_identifier>x</SPAN><SPAN=20
class=3Dp_operator>,</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_number>1</SPAN><SPAN class=3Dp_operator>)</SPAN><SPAN=20
class=3Dp_default><BR><BR></SPAN><SPAN=20
class=3Dp_commentline>#&nbsp;Create&nbsp;pysqlite&nbsp;connection&nbsp;fr=
om&nbsp;APSW&nbsp;connection</SPAN><SPAN=20
class=3Dp_default><BR></SPAN><SPAN class=3Dp_identifier>con</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN class=3Dp_operator>=3D</SPAN><SPAN=20
class=3Dp_default>&nbsp;</SPAN><SPAN =
class=3Dp_identifier>sqlite</SPAN><SPAN=20
class=3Dp_operator>.</SPAN><SPAN =
class=3Dp_identifier>connect</SPAN><SPAN=20
class=3Dp_operator>(</SPAN><SPAN =
class=3Dp_identifier>apsw_con</SPAN><SPAN=20
class=3Dp_operator>)</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>result</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>execute</SPAN><SPAN =
class=3Dp_operator>(</SPAN><SPAN=20
class=3Dp_string>"select&nbsp;times_two(15)"</SPAN><SPAN=20
class=3Dp_operator>).</SPAN><SPAN =
class=3Dp_identifier>fetchone</SPAN><SPAN=20
class=3Dp_operator>()[</SPAN><SPAN class=3Dp_number>0</SPAN><SPAN=20
class=3Dp_operator>]</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_word>assert</SPAN><SPAN class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_identifier>result</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_operator>=3D=3D</SPAN><SPAN =
class=3Dp_default>&nbsp;</SPAN><SPAN=20
class=3Dp_number>30</SPAN><SPAN class=3Dp_default><BR></SPAN><SPAN=20
class=3Dp_identifier>con</SPAN><SPAN class=3Dp_operator>.</SPAN><SPAN=20
class=3Dp_identifier>close</SPAN><SPAN class=3Dp_operator>()</SPAN><SPAN =

class=3Dp_default><BR></SPAN></DIV>
<P>This feature only works if both APSW and pysqlite are dynamically =
linked=20
against the same SQLite shared library. I. e. it will <EM>not</EM> work =
on=20
Windows without a custom built pysqlite and=20
APSW.</P></DIV></DIV></DIV></BODY></HTML>

------=_NextPart_000_0000_01C9095E.97A4B720
Content-Type: text/css;
	charset="iso-8859-2"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://oss.itsystementwicklung.de/download/pysqlite/doc/docutils.css

.first {
	MARGIN-TOP: 0px! important
}
.last {
	MARGIN-BOTTOM: 0px! important
}
.hidden {
	DISPLAY: none
}
A.toc-backref {
	COLOR: black; TEXT-DECORATION: none
}
BLOCKQUOTE.epigraph {
	MARGIN: 2em 5em
}
DL.docutils DD {
	MARGIN-BOTTOM: 0.5em
}
DIV.abstract {
	MARGIN: 2em 5em
}
DIV.abstract P.topic-title {
	FONT-WEIGHT: bold; TEXT-ALIGN: center
}
DIV.admonition {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.attention {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.caution {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.danger {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.error {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.hint {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.important {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.note {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.tip {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.warning {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; MARGIN: 2em; BORDER-LEFT: =
outset; PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.admonition P.admonition-title {
	FONT-WEIGHT: bold; FONT-FAMILY: sans-serif
}
DIV.hint P.admonition-title {
	FONT-WEIGHT: bold; FONT-FAMILY: sans-serif
}
DIV.important P.admonition-title {
	FONT-WEIGHT: bold; FONT-FAMILY: sans-serif
}
DIV.note P.admonition-title {
	FONT-WEIGHT: bold; FONT-FAMILY: sans-serif
}
DIV.tip P.admonition-title {
	FONT-WEIGHT: bold; FONT-FAMILY: sans-serif
}
DIV.attention P.admonition-title {
	FONT-WEIGHT: bold; COLOR: red; FONT-FAMILY: sans-serif
}
DIV.caution P.admonition-title {
	FONT-WEIGHT: bold; COLOR: red; FONT-FAMILY: sans-serif
}
DIV.danger P.admonition-title {
	FONT-WEIGHT: bold; COLOR: red; FONT-FAMILY: sans-serif
}
DIV.error P.admonition-title {
	FONT-WEIGHT: bold; COLOR: red; FONT-FAMILY: sans-serif
}
DIV.warning P.admonition-title {
	FONT-WEIGHT: bold; COLOR: red; FONT-FAMILY: sans-serif
}
DIV.dedication {
	MARGIN: 2em 5em; FONT-STYLE: italic; TEXT-ALIGN: center
}
DIV.dedication P.topic-title {
	FONT-WEIGHT: bold; FONT-STYLE: normal
}
DIV.figure {
	MARGIN-LEFT: 2em
}
DIV.footer {
	FONT-SIZE: smaller
}
DIV.header {
	FONT-SIZE: smaller
}
DIV.line-block {
	MARGIN-TOP: 1em; MARGIN-BOTTOM: 1em; DISPLAY: block
}
DIV.line-block DIV.line-block {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; MARGIN-LEFT: 1.5em
}
DIV.sidebar {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; FLOAT: right; PADDING-BOTTOM: 1em; MARGIN-LEFT: 1em; =
BORDER-LEFT: outset; WIDTH: 40%; CLEAR: right; PADDING-TOP: 1em; =
BORDER-BOTTOM: outset; BACKGROUND-COLOR: #ffffee
}
DIV.sidebar P.rubric {
	FONT-SIZE: medium; FONT-FAMILY: sans-serif
}
DIV.system-messages {
	MARGIN: 5em
}
DIV.system-messages H1 {
	COLOR: red
}
DIV.system-message {
	BORDER-RIGHT: outset; PADDING-RIGHT: 1em; PADDING-LEFT: 1em; =
BORDER-TOP: outset; PADDING-BOTTOM: 1em; BORDER-LEFT: outset; =
PADDING-TOP: 1em; BORDER-BOTTOM: outset
}
DIV.system-message P.system-message-title {
	FONT-WEIGHT: bold; COLOR: red
}
DIV.topic {
	MARGIN: 2em
}
H1.title {
	TEXT-ALIGN: center
}
H2.subtitle {
	TEXT-ALIGN: center
}
HR.docutils {
	WIDTH: 75%
}
OL.simple {
	MARGIN-BOTTOM: 1em
}
UL.simple {
	MARGIN-BOTTOM: 1em
}
OL.arabic {
	LIST-STYLE-TYPE: decimal
}
OL.loweralpha {
	LIST-STYLE-TYPE: lower-alpha
}
OL.upperalpha {
	LIST-STYLE-TYPE: upper-alpha
}
OL.lowerroman {
	LIST-STYLE-TYPE: lower-roman
}
OL.upperroman {
	LIST-STYLE-TYPE: upper-roman
}
P.attribution {
	MARGIN-LEFT: 50%; TEXT-ALIGN: right
}
P.caption {
	FONT-STYLE: italic
}
P.credits {
	FONT-SIZE: smaller; FONT-STYLE: italic
}
P.label {
	WHITE-SPACE: nowrap
}
P.rubric {
	FONT-WEIGHT: bold; FONT-SIZE: larger; COLOR: maroon; TEXT-ALIGN: center
}
P.sidebar-title {
	FONT-WEIGHT: bold; FONT-SIZE: larger; FONT-FAMILY: sans-serif
}
P.sidebar-subtitle {
	FONT-WEIGHT: bold; FONT-FAMILY: sans-serif
}
P.topic-title {
	FONT-WEIGHT: bold
}
PRE.address {
	MARGIN-TOP: 0px; FONT-SIZE: 100%; MARGIN-BOTTOM: 0px; FONT-FAMILY: =
serif
}
PRE.line-block {
	FONT-SIZE: 100%; FONT-FAMILY: serif
}
PRE.literal-block {
	MARGIN-LEFT: 2em; MARGIN-RIGHT: 2em; BACKGROUND-COLOR: #eeeeee
}
PRE.doctest-block {
	MARGIN-LEFT: 2em; MARGIN-RIGHT: 2em; BACKGROUND-COLOR: #eeeeee
}
SPAN.classifier {
	FONT-STYLE: oblique; FONT-FAMILY: sans-serif
}
SPAN.classifier-delimiter {
	FONT-WEIGHT: bold; FONT-FAMILY: sans-serif
}
SPAN.interpreted {
	FONT-FAMILY: sans-serif
}
SPAN.option {
	WHITE-SPACE: nowrap
}
SPAN.pre {
	WHITE-SPACE: pre
}
SPAN.problematic {
	COLOR: red
}
TABLE.citation {
	BORDER-LEFT: gray thin solid
}
TABLE.docinfo {
	MARGIN: 2em 4em
}
TABLE.docutils {
	MARGIN-TOP: 0.5em; MARGIN-BOTTOM: 0.5em
}
TABLE.footnote {
	BORDER-LEFT: black thin solid
}
TABLE.docutils TD {
	PADDING-RIGHT: 0.5em; PADDING-LEFT: 0.5em; VERTICAL-ALIGN: top
}
TABLE.docutils TH {
	PADDING-RIGHT: 0.5em; PADDING-LEFT: 0.5em; VERTICAL-ALIGN: top
}
TABLE.docinfo TD {
	PADDING-RIGHT: 0.5em; PADDING-LEFT: 0.5em; VERTICAL-ALIGN: top
}
TABLE.docinfo TH {
	PADDING-RIGHT: 0.5em; PADDING-LEFT: 0.5em; VERTICAL-ALIGN: top
}
TABLE.docutils TH.field-name {
	PADDING-LEFT: 0px; FONT-WEIGHT: bold; WHITE-SPACE: nowrap; TEXT-ALIGN: =
left
}
TABLE.docinfo TH.docinfo-name {
	PADDING-LEFT: 0px; FONT-WEIGHT: bold; WHITE-SPACE: nowrap; TEXT-ALIGN: =
left
}
H1 TT.docutils {
	FONT-SIZE: 100%
}
H2 TT.docutils {
	FONT-SIZE: 100%
}
H3 TT.docutils {
	FONT-SIZE: 100%
}
H4 TT.docutils {
	FONT-SIZE: 100%
}
H5 TT.docutils {
	FONT-SIZE: 100%
}
H6 TT.docutils {
	FONT-SIZE: 100%
}
TT.docutils {
	BACKGROUND-COLOR: #eeeeee
}
UL.auto-toc {
	LIST-STYLE-TYPE: none
}
BODY {
	FONT-FAMILY: Verdana,Arial,Helvetica,sans-serif; BACKGROUND-COLOR: =
#eeeeff
}

------=_NextPart_000_0000_01C9095E.97A4B720
Content-Type: text/css;
	charset="iso-8859-2"
Content-Transfer-Encoding: 7bit
Content-Location: http://oss.itsystementwicklung.de/download/pysqlite/doc/silvercity.css

.code_default {
	FONT-SIZE: 10pt; FONT-FAMILY: "Courier New",Courier,monospace
}
.css_class {
	COLOR: #900000
}
.css_comment {
	COLOR: green; FONT-STYLE: italic
}
.css_directive {
	FONT-WEIGHT: bold; COLOR: #009000
}
.css_doublestring {
	COLOR: navy
}
.css_id {
	COLOR: #900000
}
.css_identifier {
	COLOR: black
}
.css_important {
	COLOR: blue
}
.css_operator {
	FONT-WEIGHT: bold; COLOR: #000090
}
.css_pseudoclass {
	COLOR: #900000
}
.css_singlestring {
	COLOR: navy
}
.css_tag {
	FONT-WEIGHT: bold; COLOR: #900000
}
.css_unknown_identifier {
	COLOR: red
}
.css_unknown_pseudoclass {
	COLOR: #ff0000
}
.css_value {
	COLOR: navy
}
.c_character {
	COLOR: olive
}
.c_comment {
	COLOR: green; FONT-STYLE: italic
}
.c_commentdoc {
	COLOR: green; FONT-STYLE: italic
}
.c_commentdockeyword {
	FONT-WEIGHT: bold; COLOR: navy
}
.c_commentdockeyworderror {
	FONT-WEIGHT: bold; COLOR: red
}
.c_commentline {
	COLOR: green; FONT-STYLE: italic
}
.c_commentlinedoc {
	COLOR: green; FONT-STYLE: italic
}
.c_identifier {
	COLOR: black
}
.c_number {
	COLOR: #009999
}
.c_operator {
	COLOR: black
}
.c_preprocessor {
	FONT-WEIGHT: bold; COLOR: navy
}
.c_regex {
	COLOR: olive
}
.c_string {
	COLOR: olive
}
.c_stringeol {
	COLOR: olive
}
.c_uuid {
	COLOR: olive
}
.c_verbatim {
	COLOR: olive
}
.c_word {
	FONT-WEIGHT: bold; COLOR: navy
}
.c_word2 {
	FONT-WEIGHT: bold; COLOR: navy
}
.h_asp {
	COLOR: #ffff00
}
.h_aspat {
	COLOR: #ffdf00
}
.h_attribute {
	COLOR: #008080
}
.h_attributeunknown {
	COLOR: #ff0000
}
.h_cdata {
	COLOR: #ffdf00
}
.h_comment {
	COLOR: #808000
}
.h_doublestring {
	COLOR: olive
}
.h_entity {
	COLOR: #800080
}
.h_number {
	COLOR: #009999
}
.h_other {
	COLOR: #800080
}
.h_script {
	COLOR: #000080
}
.h_singlestring {
	COLOR: olive
}
.h_tag {
	COLOR: #000080
}
.h_tagend {
	COLOR: #000080
}
.h_tagunknown {
	COLOR: #ff0000
}
.h_xmlend {
	COLOR: #0000ff
}
.h_xmlstart {
	COLOR: #0000ff
}
.pl_array {
	COLOR: black
}
.pl_backticks {
	COLOR: olive
}
.pl_character {
	COLOR: olive
}
.pl_commentline {
	COLOR: green; FONT-STYLE: italic
}
.pl_datasection {
	COLOR: olive
}
.pl_error {
	COLOR: red
}
.pl_hash {
	COLOR: black
}
.pl_here_delim {
	COLOR: olive
}
.pl_here_q {
	COLOR: olive
}
.pl_here_qq {
	COLOR: olive
}
.pl_here_qx {
	COLOR: olive
}
.pl_identifier {
	COLOR: black
}
.pl_longquote {
	COLOR: olive
}
.pl_number {
	COLOR: #009999
}
.pl_operator {
	COLOR: black
}
.pl_pod {
	COLOR: black; FONT-STYLE: italic
}
.pl_preprocessor {
	FONT-WEIGHT: bold; COLOR: navy
}
.pl_punctuation {
	COLOR: black
}
.pl_regex {
	COLOR: olive
}
.pl_regsubst {
	COLOR: olive
}
.pl_scalar {
	COLOR: black
}
.pl_string {
	COLOR: olive
}
.pl_string_q {
	COLOR: olive
}
.pl_string_qq {
	COLOR: olive
}
.pl_string_qr {
	COLOR: olive
}
.pl_string_qw {
	COLOR: olive
}
.pl_string_qx {
	COLOR: olive
}
.pl_symboltable {
	COLOR: black
}
.pl_word {
	FONT-WEIGHT: bold; COLOR: navy
}
.p_character {
	COLOR: olive
}
.p_classname {
	FONT-WEIGHT: bold; COLOR: blue
}
.p_commentblock {
	COLOR: gray; FONT-STYLE: italic
}
.p_commentline {
	COLOR: green; FONT-STYLE: italic
}
.p_defname {
	FONT-WEIGHT: bold; COLOR: #009999
}
.p_identifier {
	COLOR: black
}
.p_number {
	COLOR: #009999
}
.p_operator {
	COLOR: black
}
.p_string {
	COLOR: olive
}
.p_stringeol {
	COLOR: olive
}
.p_triple {
	COLOR: olive
}
.p_tripledouble {
	COLOR: olive
}
.p_word {
	FONT-WEIGHT: bold; COLOR: navy
}
.yaml_comment {
	COLOR: #008800; FONT-STYLE: italic
}
.yaml_document {
	COLOR: #808080; FONT-STYLE: italic
}
.yaml_identifier {
	FONT-WEIGHT: bold; COLOR: navy
}
.yaml_keyword {
	COLOR: #880088
}
.yaml_number {
	COLOR: #880000
}
.yaml_reference {
	COLOR: #008888
}

------=_NextPart_000_0000_01C9095E.97A4B720--
